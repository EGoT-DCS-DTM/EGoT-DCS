# Abdullah Barghouti 
# DTM Tool - Trust Model Simulator
# Portland State University Fall 2020

import sys
import csv
import argparse
import pathlib
import time
import math

import pandas as pd
from datetime import date

#take in user arguments
ap = argparse.ArgumentParser()
ap.add_argument('-f', '--file', required=True, metavar='', help = 'name of the file that will be generated')
ap.add_argument('-e', '--equation', required=True, metavar='', help = 'the equation to be used to calculate trust')
ap.add_argument('-d', '--debug', required=False, metavar='', help = 'runs simulator in debug mode. Prints with user input')
args = ap.parse_args()

fileName = args.file
sfn = fileName.split(".csv")
simOutFileName = sfn[0] + "_SimOut.csv"

ALPHA = 10
BETA = 2
DELTA = 1
GAMMA = 0.05
n_SDTT = 0
n_AvgTX = 0
MAX_COMMFREQ = 0
MIN_TSLC = 100

# response block thresholds 
R_THRESH_TS = 4
R_THRESH_DS = 1.6
R_THRESH_C = 0.8
R_THRESH_TotMsg = 10
R_THRESH_CommFrq = 3.3
R_THRESH_CommFrq_HIGH = 6
R_THRESH_TxT = 40
R_THRESH_TSLC = 900
R_THRESH_RFC = 0.5

#increase to increase message freq
CFC = 0

#time stamp increment 
TIMESTAMP = 1

TEMP = 0

param = {"trust score" : 0,
"reputation" : 0,
"distrust score" : 0,
"certainty" : 0.1,
"relative factor of certainty": 0,
"expected message count" : 0,
"unexpected message count" : 0,
"total message count" : 0,
"time stamp" : 0,
"registration date" : 0,
"communication frequency" : 0,
"message transit time" : 0,
"average transit time" : 0,
"time since last communication" : 0,
"timeout count" : 0,
"alert count" : 0,
"other action count" : 0,
"SD transit time" : 0,
"DTM response:" : 0
}

TIME = time.time()
currentTrustVector = {'DCM': param, 'DTM': param.copy(), 'DERAS': param.copy(), 'DER': param.copy()}
oldTrustVector = currentTrustVector.copy()
#               0   1       2           3
actorList = {'DCM', 'DTM', 'DERAS' , 'DER'}

initalTime = {0,0,0,0}
#print(currentTrustVector)
#print(oldTrustVector)

#read from data (csv) file
'''
    this function is in charge of ... and takes in a full row from the csv file
    generated by the trust model data generator 
'''
def messageCount(current_row):
    actor = current_row[0]
    
    #update old vector 
    oldTrustVector[actor]['unexpected message count'] = currentTrustVector[actor]['unexpected message count']
    oldTrustVector[actor]['expected message count'] = currentTrustVector[actor]['expected message count']
    oldTrustVector[actor]['total message count'] = currentTrustVector[actor]['total message count']

    print(" oldTrustVector[actor]['unexpected message count']", oldTrustVector[actor]['unexpected message count'])
    if (row[1] == 'Ex'):
        currentTrustVector[actor]['expected message count'] += 1
        
        #print(currentTrustVector[actor]['expected message count'])
    else:
        currentTrustVector[actor]["unexpected message count"] += 1
        print("currentTrustVector[actor]['unexpected message count']" ,currentTrustVector[actor]['unexpected message count'])

    currentTrustVector[actor]["total message count"] = currentTrustVector[actor]['expected message count'] + currentTrustVector[actor]["unexpected message count"]

'''
    this function is in charge of ... and takes in a full row from the csv file
    generated by the trust model data generator 
'''
def timeKeeping(current_row):
    actor = current_row[0]

    #update old vector
    oldTrustVector[actor]["time stamp"] = currentTrustVector[actor]["time stamp"]
    oldTrustVector[actor]["time since last communication"] = currentTrustVector[actor]["time since last communication"]
    
    #time stamp
    #currentTrustVector[actor]["time stamp"] = time.time()
    currentTrustVector[actor]["time stamp"] = Time()

    #time since last communication
    if (currentTrustVector[actor]["time since last communication"] == 0 and currentTrustVector[actor]["registration date"] == 0):
        currentTrustVector[actor]["time since last communication"] = 0
    else:
        print(oldTrustVector[actor]["time stamp"], "OLD TIME STAMP")
        #print(time.time())
        #currentTrustVector[actor]["time since last communication"] = time.time() - oldTrustVector[actor]["time stamp"]
        print(Time())
        currentTrustVector[actor]["time since last communication"] = float(Time() - oldTrustVector[actor]["time stamp"])
        print("time stamp",currentTrustVector[actor]["time since last communication"])
        print("currentTrustVector[actor]['time since last communication']", currentTrustVector[actor]["time since last communication"])

    #registration date. this is the date the data was generated. 
    if(currentTrustVector[actor]["registration date"] == 0):
        #currentTrustVector[actor]["registration date"] = time.time()
        currentTrustVector[actor]["registration date"] = float(current_row[2])
        print("row 2", currentTrustVector[actor]["registration date"])

    #time.sleep(.001)

    #message transit time
    currentTrustVector[actor]["message transit time"] = float(current_row[3])

'''
    this function is in charge of ... and takes in a full row from the csv file
    generated by the trust model data generator 
'''

def response(current_row):
    actor = current_row[0]
    response_flag = 0
    print("----RESPONSE SECTION----")
    #to see where we are 
    print(currentTrustVector[actor]["total message count"])

    #check for Excessive TSLC 
    if currentTrustVector[actor]["total message count"] > R_THRESH_TSLC:
        DTM_response = "Excessive time since last communication from" + actor
        currentTrustVector[actor]["DTM response"] = DTM_response
        response_flag = 1
        print(DTM_response)

    #check for low trust score 
    if (currentTrustVector[actor]["trust score"] < R_THRESH_TS and currentTrustVector[actor]["certainty"] > R_THRESH_C and
        currentTrustVector[actor]["relative factor of certainty"] > R_THRESH_RFC and currentTrustVector[actor]["distrust score"] > R_THRESH_DS):
        DTM_response = "Trust is low for" + actor
        currentTrustVector[actor]["DTM response"] = DTM_response
        response_flag = 1
        print(DTM_response)
    
    #check for low communication rate
    if ((currentTrustVector[actor]["communication frequency"] < R_THRESH_CommFrq) and (currentTrustVector[actor]["total message count"] > R_THRESH_TotMsg)):
        DTM_response = "Communication rate is low from" + actor
        currentTrustVector[actor]["DTM response"] = DTM_response
        response_flag = 1
        print(DTM_response)
    
    #check for excessive communication rate 
    if ((currentTrustVector[actor]["communication frequency"] > R_THRESH_CommFrq_HIGH) and (currentTrustVector[actor]["total message count"] > R_THRESH_TotMsg)):
        DTM_response = "Communication rate is ecessive from" + actor
        currentTrustVector[actor]["DTM response"] = DTM_response
        response_flag = 1
        print(DTM_response)

    if (not response_flag):
        currentTrustVector[actor]["DTM response"] = "Do nothing"


#pass in the whole row
def printToCSV(row,x): 
  #  d = {'Actor' : row[0]}    
    d = {'Actor' : row[0], 
    'Message Eval Catagory' : row[1],
    'Current Time' : row[2],
    'Transit Time' : row[3]
    }
    actor = row[0]
    df2 = pd.DataFrame(row)
    print("df2", df2)
    
    #df1 = pd.DataFrame(d,index=range(len(d)))
    df1 = pd.DataFrame(d,index=range(len(d)-3))
    #df2 = df1.join(df2)
    print("df2 join", df2)
    df = pd.DataFrame(currentTrustVector[actor],index=range(int(len(currentTrustVector[actor].keys())/len(currentTrustVector[actor].values()))))
    print("df")
    print(df)
    df1 = df1.join(df)
    #df2 = df2.join(df)
    print("df1")
    print(df1.columns)
    #with open("test1.csv", "w") as f:
    #    f.write(df1.columns)
    #df1.columns.to_csv('test1.csv', index = False, mode = "a", header= False)

    if (x == 0):
        today = date.today()
        td = today.strftime("%d/%m/%Y")
        info = {'Name':args.file,
        'Data':td}
        #csv.writer('test1.csv', 'w', info)
        
        inf = pd.DataFrame(info, index = range(1))
        inf.to_csv(simOutFileName, index = False, mode = "a", header= False)
        df1.to_csv(simOutFileName, index = False, mode = "a")
        x += 1
    else:
        df1.to_csv(simOutFileName, index = False, mode = "a", header= False)
    
    temp = currentTrustVector[actor]
    k = temp.keys()
    #for k in temp:
    print(", ".join(k))
    print()
    val = []
    for k, v in temp.items():
        val.append(str(v))
    print(", ".join(val))
    

    data = currentTrustVector[actor]
    key = []
    val = []
    for k, v in data.items():
        key.append(k)
        pad = (len(k)- len(str(v)) ) * ' '
        val.append(pad + str(v))
    print(','.join(key))
    print(','.join(val))
    
  
#    for element in printActor:
 #   print(element, end = ",")
def printClean():
    for K,V in currentTrustVector.items():
        print()
        #prints actor 
        print(K)

        #prints dicts associated with actor 
        for k,v in V.items():
            print(k,":",v)

def Time():
    global TIME
    TIME = TIME + TIMESTAMP
    return float(TIME)

def calculation(current_row):
    actor = current_row[0]

    global n_AvgTX 
    n_AvgTX+= 1
    global n_SDTT 
    n_SDTT+= 1
    print(actor)

    #update old trust vector 
    oldTrustVector[actor]['certainty'] = currentTrustVector[actor]['certainty']
    oldTrustVector[actor]["trust score"] = currentTrustVector[actor]["trust score"]
    oldTrustVector[actor]["unexpected message count"] = currentTrustVector[actor]["unexpected message count"]
    oldTrustVector[actor]["average transit time"] = currentTrustVector[actor]["average transit time"]

    #calculate trust score 
    msgRatio = currentTrustVector[actor]["expected message count"] - (ALPHA * currentTrustVector[actor]["unexpected message count"])
    print("old certainty")
    print(ALPHA, "ALPHA")
    print(oldTrustVector[actor]["certainty"])
    currentTrustVector[actor]["trust score"] = msgRatio * currentTrustVector[actor]["certainty"]
    
    #calculate communication frequency 

    print(currentTrustVector[actor]["registration date"], "currentTrustVector[actor]['registration date']")
    we = time.time()
    print(float(we - currentTrustVector[actor]["registration date"]))
    currentTrustVector[actor]["communication frequency"] = ((currentTrustVector[actor]["total message count"])/ (time.time() - currentTrustVector[actor]["registration date"]))
    print("comm freq", currentTrustVector[actor]["communication frequency"])
    
    #normalize TSLC
    global MIN_TSLC
    if (not currentTrustVector[actor]["time since last communication"] == 0):
        if (currentTrustVector[actor]["time since last communication"] < MIN_TSLC):
                MIN_TSLC = currentTrustVector[actor]["time since last communication"]

    #calculate normalized comm freq
    global MAX_COMMFREQ
    if (currentTrustVector[actor]["communication frequency"] > MAX_COMMFREQ):
        MAX_COMMFREQ = currentTrustVector[actor]["communication frequency"]


    #calculate relative factor of certainty  (RFC)
    print("expected message count", currentTrustVector[actor]["expected message count"])
    print("total message count",currentTrustVector[actor]["total message count"])
    currentTrustVector[actor]["relative factor of certainty"] = abs( 
        (currentTrustVector[actor]["expected message count"] / currentTrustVector[actor]["total message count"]) - .5 ) * BETA

    #calculate certainty
    '''
    main issue is with communication freq and 1/time since last comm

    set a constant communication freq
    ''' 
    if (not currentTrustVector[actor]["time since last communication"] == 0):
        currentTrustVector[actor]["certainty"] = (
            currentTrustVector[actor]["relative factor of certainty"] * (1 - math.exp(-GAMMA * currentTrustVector[actor]["total message count"])) * 
            (currentTrustVector[actor]["communication frequency"]/MAX_COMMFREQ) * (MIN_TSLC/(currentTrustVector[actor]["time since last communication"])))
        if (currentTrustVector[actor]["certainty"] == 0):
            currentTrustVector[actor]["certainty"] = 0.1

        print(actor)
        print((currentTrustVector[actor]["communication frequency"]/MAX_COMMFREQ), "(currentTrustVector[actor]['communication frequency']/MAX_COMMFREQ)")
        print((MIN_TSLC/(currentTrustVector[actor]["time since last communication"]), "(MIN_TSLC/(currentTrustVector[actor]['time since last communication'])"))


    #calculate distrust
    currentTrustVector[actor]["distrust score"] = oldTrustVector[actor]["unexpected message count"] * currentTrustVector[actor]["certainty"]
    print(currentTrustVector[actor]["distrust score"], "currentTrustVector[actor]['distrust score']")
    
    #TODO:calculate average transit time
    currentTrustVector[actor]["average transit time"] = ((currentTrustVector[actor]["message transit time"] +
    n_AvgTX * oldTrustVector[actor]["average transit time"])/ (n_AvgTX + 1))
    
    #TODO:calculate standard deviation transit time 
    SD = ((n_SDTT * oldTrustVector[actor]["SD transit time"] ** 2 + (currentTrustVector[actor]["message transit time"] - 
    oldTrustVector[actor]["average transit time"]) * currentTrustVector[actor]["message transit time"] - currentTrustVector[actor]["average transit time"]) / 
    n_SDTT)
    print(currentTrustVector[actor]["total message count"], "MSG CNT")
    print(oldTrustVector[actor]["SD transit time"] ** 2, "SDTT ^2")
    print(currentTrustVector[actor]["message transit time"], "MSG TX")
    print(currentTrustVector[actor]["average transit time"], "AVG TX")
    print(SD, " SD")
    SD = abs(SD)
    currentTrustVector[actor]["SD transit time"] = math.sqrt(SD)
    #calculate relative factor of transit time
    #TODO:TBD what to do
    '''
    if (abs(currentTrustVector[actor]["average tranist time"] - currentTrustVector[actor]["message tranist time"]) >
    abs(DELTA * currentTrustVector[actor]["SD transit time"])):
        print("BAD")
    '''
    
#TODO: make this a main function
if (pathlib.Path(args.file).exists() == True):
    with open(args.file, mode='r') as csvFile:
        fileReader = csv.reader(csvFile)
        count = 0
        x = 0
        for row in fileReader:
            if (count > 0):
                #update message counters
                messageCount(row)
                #timekeeping new message
                timeKeeping(row)
                if (args.equation == "v1"):
                    #calculate MVoT
                    calculation(row)
                    #generate response
                    response(row)
                    #write to output csv file
                    printToCSV(row,x)
                    x += 1
                #response(row)
            if (args.debug == 'y'):
                input("Press Enter to continue...")
            count += 1
        print("count", count)
        printClean()
        print()
        print(currentTrustVector)

else:
    print("File does not exist")
    